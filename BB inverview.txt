#largest 3 numbers in a array
#三个最大数
arr = [-1,0,5,3,4,-6,8]
def largest_three(arr):
    first,second,third = arr[0],arr[0],arr[0]
    for i in arr:
        if i > first:
            third = second
            second = first
            first = i
        elif i > second:
            third = second
            second = i
        elif i > third:
            third = i
    return (first, second, third)
print largest_three(arr)
#aaaabbcdddd, 3 => a4bbcd4
#浓缩字符串
s = 'aaaabbcdddddeeefgg'
def fun(s, k):
    res = ""
    i = 0
    while i < len(s):
        j = 0
        while i+j < len(s) and s[i] == s[i+j]:
            j += 1
        if j > k:
            res += s[i] + str(j)            
        else:
            res += s[i:i+j]         
        i += j
    return res
print fun(s,3)
#找到最长的010101
#longest 001010111010 => 010101
s = '0010101110101010'
s = list(s)
def fun1(arr):
    start,end, max_len = 0,0,0
    i = 0
    res = 0
    while i < len(arr):
        j = i+1
        while j < len(arr) and arr[j] != arr[j-1]:
            j += 1     
        if j- i > max_len:
            max_len = j-i
            start,end=i,j
        i = j    
    return arr[start:end]

print fun1(s) 
#找到最大的三个数的乘积           
#find the largest triplet in a array
arr = [-1,0,5,3,4,-6,8]
def largest_triplet(arr):
    res = 0
    arr = sorted(arr)
    return max(arr[-1]*arr[-2]*arr[-3], arr[0]*arr[1]*arr[-1])
    
print largest_triplet(arr)
#find how many 6 digits numbers 123123

#祖玛碰撞
#zuma s = 'aabbbacddffffd' => 'c'
s = 'xxxaabbbacddffddd'
def zuma(s):
    sk = []
    for i in range(len(s)):
        if not sk or sk[-1][0] != s[i]:
            sk.append([s[i],1])
            continue
        if s[i] == sk[-1][0]:
            sk[-1][1] += 1
        if sk[-1][1] >= 3:
            sk.pop()
    res = ""
    for c,n in sk:
        res += c*n
    return res
print s
print zuma(s)

##reservior sampling
#水塘取样
import random
arr = [i for i in range(100)]
def reservoir_sample(arr,k,n):
    res = [0]*k
    #first, set the k sample as the first k elements of n
	res[:k] = arr[:k]
    for i in range(k, n):
        x = random.randint(0, i)
        if x < k:
            res[x] = arr[i]
    return res
print reservoir_sample(arr, 3, 100)

################################################
a = [0,-1,-2,-3,-8,-9]
b = [9,8,7,5,4,-1,1,2,3]
#找极值，最大值
def find_peak1(arr):
    l,r=0,len(arr)-1
    while(l < r):
        mid = l+(r-l)/2
        if arr[mid] > arr[mid+1]:
            r = mid
        else:
            l = mid+1
    return (arr[l],arr[r])
#找极值，最小值
def find_peak2(arr):
    l,r=0,len(arr)-1
    while l < r:
        mid = l+(r-l)/2
        if arr[mid] < arr[mid+1]:
            r = mid
        else:
            l = mid+1
    return (arr[l],arr[r])

print find_peak1(a)
print find_peak2(b)
###############################################
#已知出生年月，死亡年月，求最多人口年
#Find the point where maximum intervals overlap
arri = [1, 2, 10, 5, 5]
exit = [4, 5, 12, 9, 12]

def find_max(arri, exit):
    res = [0]*(max(exit) - min(arri)+1)
    #increase by one when one arriv
    for i in arri:
        res[i-min(arri)] +=1
    #decrease by one when one exit
    for i in exit:
        res[i-min(arri)] -= 1
    #find partial sum of res
    for i in range(1, len(res)):
        res[i] += res[i-1]
    print "at each time, there are ? peole present:"
    print res
    return max(res)

print find_max(arri, exit)
#洗牌
#shuffle
import random
def shuffle(arr):
	for i in range(len(arr)):
	    pos = random.randint(0, len(arr)-i-1)
		arr[i], arr[i+pos] = arr[i+pos], arr[i]
    return arr
#约瑟夫环问题
def jeseph(m, n):
    killed = [False]*m
    cnt = 0
    start = -1
    while cnt < m-1:
        k = 0
        while k < n: 
            start += 1
            if start == m:
                start = 0
            if killed[start] == False:
                k+=1
        print start
        killed[start] = True
        cnt += 1
    for i in range(m):
        if killed[i] == False:
            return i    
print jeseph(6,5)

#两数相加，不能用加号，方法1
def foo(a,b):
    res = a^b
    carry = (a&b)<<1
    while carry:
        tmp = res
        res = res^carry
        carry = (carry&tmp)<<1
        print res, carry
    return res
#两数相加，不能用加号，方法2
def foo1(a,b):
    if b==0:
        return a
    res = a^b
    carry = (a&b)<<1
    return foo1(res, carry)
#一个数的各个位相加，直到只剩一位
def fun(num):    
    while num >= 10:
        res = 0
        tmp = num
        while tmp:
            res += tmp%10
            tmp /= 10
        num = res
    return num
print
print fun(197)
#根据数字排列重新排列字符串
def fun2(strs, arr):
    mp = {}
    for i in range(len(strs)):
        mp[arr[i]] = strs[i]
    for i in sorted(arr):
        print mp[i] + " ",
    
strs = ["ab", "cd", "ef", "gh"]
arr = [5,2,1,8]
fun2(strs, arr)
#十六位进制转十进制
def hextodec(str, dic):
    res = 0
    cnt = 0
    for i in range(len(str)-1, 1, -1):
        res += pow(16, cnt)*dic[str[i]]
        cnt+=1
    return res
dic = {'0':0,'1':1, '2':2, '3':3,'4':4, '5':5, '6':6,'7':7, '8':8,\
      '9':9, 'a':10, 'b':11,'c':12,'d':13,'e':14,'f':15}
print hextodec("0x0000001e", dic)
        
                 
