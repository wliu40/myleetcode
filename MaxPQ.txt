class MaxPQ:
    def __init__(self):
        self.pq = [None]
        self.N = 0
    def getPQ(self):
        return self.pq[1:]
    def __str__(self):
        return str(self.pq[1:])
    
    def insert(self, val):
        self.pq.append(val)
        self.N += 1      
        self.swim(self.N)
          
        
    def swim(self, k):
        while k>1 and self.pq[k/2] < self.pq[k]:          
            self.swap(k/2, k)
            k /= 2
    def sink(self, k):        
        while 2*k <= self.N:
            j = 2*k
            #两个子节点，哪个子节点比较大？
            if j < self.N and self.pq[j] < self.pq[j+1]:
                j += 1
            #如果已经比那个大的更大了，则跳出循环
            if self.pq[k] > self.pq[j]:
                break
            self.swap(k,j)
            k = j
        
    def swap(self,i,j):
        tmp = self.pq[i]
        self.pq[i] = self.pq[j]
        self.pq[j] = tmp
    def sort(self):
        while self.N > 1:
            self.swap(1, self.N)
            self.N -= 1
            self.sink(1)

pq = MaxPQ()        
l = [2,4,0,1,8,7,3]
for i in l:
    pq.insert(i)
print pq
pq.sort()
print pq




    